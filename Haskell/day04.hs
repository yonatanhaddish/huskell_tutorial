-- List Comprehension

------------------------------------------------------------------------------------
factorS :: Int -> [Int]
factorS n = [x | x <- [1..n], n `mod` x == 0]
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
primE :: Int -> Bool
primE n = factorS n == [1,n]
------------------------------------------------------------------------------------
primeS :: Int -> [Int]
primeS n = [x | x <- [2..n], primE x]
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
oddsL :: Int -> [Int]
oddsL n = [x | x <- [1..n], x `mod` 2 == 1]
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
-- positionS :: Eq a => a -> [a] -> [Int]
positionS :: Int -> [Int] -> [Int]
positionS x xs = [i | (x',i) <- zip xs [0..], x' == x]